plugins {
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.22'
    id 'org.jetbrains.kotlin.kapt' version '1.9.22'
    id("org.jetbrains.dokka") version "2.0.0"
}

group = 'blog'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

kotlin {
    jvmToolchain(21)
}

repositories {
    mavenCentral()
    google()
    maven { url = uri("https://jitpack.io") }
}

dependencies {
    // === Kotlin ===
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    
    // === 스프링 부트 ===
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    
    // === Exposed ===
    implementation 'org.jetbrains.exposed:exposed-core:0.45.0'
    implementation 'org.jetbrains.exposed:exposed-dao:0.45.0'
    implementation 'org.jetbrains.exposed:exposed-java-time:0.45.0'
    implementation 'org.jetbrains.exposed:exposed-spring-boot-starter:0.45.0'
    
    // === MapStruct ===
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    
    // === JWT ===
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    
    // === 데이터베이스 ===
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
    
    // === API 문서화 ===
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // === 로깅 ===
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    
    // === 환경변수 관리 ===
    implementation 'me.paulschwarz:spring-dotenv:2.5.4'
    
    // === 테스트 ===
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.kotest:kotest-runner-junit5:5.8.0'
    testImplementation 'io.mockk:mockk:1.13.9'
    testRuntimeOnly 'com.h2database:h2'
    
    // === Dokka 최신 버전은 플러그인으로만 관리 ===
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += [
            '-Xjsr305=strict',
            '-Xjvm-default=all'  // Exposed를 위한 설정
        ]
        jvmTarget = '21'
        apiVersion = '1.9'
        languageVersion = '1.9'
    }
}

dokkaHtml {
    outputDirectory = file("${projectDir}/docs/dokka")
    dokkaSourceSets {
        main {
            moduleName = "Vans Story Backend"
            includes.from("Module.md")
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(new URL("https://github.com/yourusername/vans_story_be/tree/main/src/main/kotlin"))
                remoteLineSuffix.set("#L")
            }
            perPackageOption {
                matchingRegex.set(".*\\.internal.*")
                suppress.set(true)
            }
        }
    }
}

// Exposed 설정
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += [
            '-Xjsr305=strict',
            '-Xjvm-default=all'  // Exposed를 위한 설정
        ]
        jvmTarget = '21'
        apiVersion = '1.9'
        languageVersion = '1.9'
    }
}

// QueryDSL 관련 설정 제거
clean {
    delete file("$buildDir/generated")
}

// bootRun JVM 인코딩 설정
bootRun {
    jvmArgs = ['-Dfile.encoding=UTF-8', '-Dconsole.encoding=UTF-8', '-Dspring.profiles.active=dev']
}

// 빌드 성능 최적화 설정
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += [
            "-Xopt-in=kotlin.RequiresOptIn",
            "-Xjvm-default=all"
        ]
    }
}

// 테스트 최적화
tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 100
    failFast = true
}

// Kapt 설정
kapt {
    javacOptions {
        option("-source", "21")
        option("-target", "21")
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "21"
        freeCompilerArgs += [
            "-Xopt-in=kotlin.RequiresOptIn",
            "-Xjvm-default=all"
        ]
    }
}

